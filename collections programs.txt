ArrayList Demo:
------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollectionsDemo
{
    internal class ArrayListDemo
    {
        static void Main(string[] args)
        {
            ArrayList arrayList = new ArrayList();
            arrayList.Add(123);
            arrayList.Add('p');
            arrayList.Add("Geetha");
            arrayList.Add(564.35);
            Console.WriteLine(arrayList[3] );
            Console.WriteLine("List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine( item );
            }
            
            Console.WriteLine("\n\n Total Count of item in arraylist" + arrayList.Count);
            
           arrayList.Insert(2,"Hexaware");
            Console.WriteLine("\n\n after inserted value in the index of2 \n List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }
            arrayList.Remove('p');
            Console.WriteLine("\n\n after Removed  p from arrayList  \n List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }

            int[] integerArray = { 30, 40, 50, 60 };
            arrayList.InsertRange(0,integerArray);
            Console.WriteLine("\n\n after inserted integerarray in the arrayList  \n List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }
            arrayList.RemoveRange(0, 3);
            Console.WriteLine("\n\n after Removed 3 values from oth index  \n List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }
            arrayList.RemoveAt(3);
            Console.WriteLine("\n\n after RemovedAt(3)  \n List of item in array Lists are");
            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine(  "\n\nCount "+arrayList.Count);
            Console.WriteLine(" Heaxware is available or not  "+ arrayList.Contains("Hexaware") );
        }
    }
}
=============================================================================================================================
Stack 
-----------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace CollectionsDemo
{
    internal class StackDemo
    {
        static void Main(string[] args)
        {
            Stack stack = new Stack();
            stack.Push("Tina");
            stack.Push("Riya");
            stack.Push(544);
            stack.Push('T');
            foreach (var item in stack)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("\n\n Count "+ stack.Count );

            stack.Pop();
            Console.WriteLine("\n\nAfter Pop items in stack are");
            foreach (var item in stack)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("\n\n Count " + stack.Count);
            Console.WriteLine("\n\n Tina is availabnle or not"+stack.Contains("Tina"));
        }
    }
}
==============================================================================================================================
Queue
----------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
namespace CollectionsDemo
{
    internal class QueueDemo
    {
        static void Main(string[] args)
        {
            Queue queue = new Queue();
            queue.Enqueue(10);
            queue.Enqueue("PETER");
            queue.Enqueue("yash");
            Console.WriteLine("\n\n Items in queue are");
            foreach (var item in queue)
            {
                Console.WriteLine( item);
            }

            Console.WriteLine("\n\n Count "+queue.Count);
            queue.Dequeue();
            Console.WriteLine("\n\n after Items Removed from the  queue are");
            foreach (var item in queue)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("\n\n Count " + queue.Count);

        }
    }
        
}
=========================================================================================================
Hashtable 
--------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
namespace CollectionsDemo
{
    internal class HashTableDemo
    {
        static void Main(string[] args)
        {
            Hashtable hashtable = new Hashtable();
            hashtable.Add("001", "Web Technologies");
            hashtable.Add("002", "Data WareHousing");
            hashtable.Add(3, "Mobile application");
            Console.WriteLine( "\n\n Keys in HashTable" );
            foreach (var item in hashtable.Keys) {
                Console.WriteLine(item);
            }
            Console.WriteLine("\n\n Values in HashTable");
            foreach (var item in hashtable.Values) {
                Console.WriteLine(item);
            }
            Console.WriteLine("\n\n Key and values  in HashTable");
            foreach (DictionaryEntry item in hashtable)
            {
               
                Console.WriteLine(item.Key + "\t "+item.Value);
            }

            hashtable["sam"] = "Manager";
            hashtable[3] = "Developer";
            Console.WriteLine("\n\n Key and values  in HashTable");
            foreach (DictionaryEntry item in hashtable)
            {

                Console.WriteLine(item.Key + "\t " + item.Value);
            }
        }
    }
}
==============================================================================================================================================
SortedList Demo
-----------------
 public class SortedListDemo
    {
        public static void Main(string[] args)
        {
            //Creating sortedList Collection
            SortedList sortedList = new SortedList();
            //Adding Elements to SortedList using Add Method
            //Key type going to be same
            sortedList.Add(1, "One");
            sortedList.Add(5, "Five");
            sortedList.Add(4, "Four");
            sortedList.Add(2, "Two");
            sortedList.Add(3, "Three");
            //Duplicate Key not allowed
            //System.ArgumentException: 'Item has already been added. Key in dictionary: '4'  Key being added: '4''
            //sortedList.Add(4, "Four");
            //Null value is allwed
            //sortedList.Add(6, null);
            //Duplicate Value is allowed
            //sortedList.Add(7, "Five");
            //In this case string key is not valid, throw Exception
            //sortedList.Add("Ten", "Ten");
            //Accessing SortedList using For loop
            Console.WriteLine("Accessing SortedList using For loop");
            for (int x = 0; x < sortedList.Count; x++)
            {
                Console.WriteLine($"Key: {sortedList.GetKey(x)}, Value: {sortedList.GetByIndex(x)}");
            }
            Console.WriteLine("\nAccessing SortedList using For Each loop");
            //Accessing SortedList using For Each loop
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
            }
            Console.WriteLine("\nAccessing SortedList using Keys");
            Console.WriteLine($"Key: 1, Value: {sortedList[1]}");
            Console.WriteLine($"Key: 2, Value: {sortedList[2]}");
            Console.WriteLine($"Key: 3, Value: {sortedList[3]}");
            Console.WriteLine("\nAccessing SortedList using Index");
            Console.WriteLine($"Key: 1, Index: 0, Value: {sortedList.GetByIndex(0)}");
            Console.WriteLine($"Key: 2, Index: 1, Value: {sortedList.GetByIndex(1)}");
            Console.WriteLine($"Key: 3, Index: 2, Value: {sortedList.GetByIndex(2)}");
            
        }
    }
}


Adding Elements to SortedList using Collection Initializer in C#:
----------------------------------------------------------------------
//Creating sortedList using Object Initializer
           //Creating sortedList object
            SortedList sortedList = new SortedList();
            //Adding Elements to SortedList using Add
            sortedList.Add("Ind", "India");
            sortedList.Add("USA", "United State of America");
            sortedList.Add("SA", "South Africa");
            sortedList.Add("PAK", "Pakistan");
            Console.WriteLine("SortedList Elements");
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
            }
            // Remove value having key PAK Using Remove() method
            sortedList.Remove("PAK");
            // After Remove() method
            Console.WriteLine("\nSortedList Elements After Remove Method");
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
            }
            // Remove element at index 1 Using RemoveAt() method
            sortedList.RemoveAt(1);
            Console.WriteLine("\nSortedList Elements After RemoveAT Method");
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
            }
            // Remove all key/value pairs Using Clear method
            sortedList.Clear();
            Console.WriteLine($"After Clear Method Total Key-Value Pair Present is : {sortedList.Count} ");

//Checking the key using the Contains methid
            Console.WriteLine("Is Ind Key Exists : " + sortedList.Contains("Ind"));
            Console.WriteLine("Is NZ Key Exists : " + sortedList.Contains("NZ"));
            //Checking the key using the ContainsKey methid
            Console.WriteLine("Is Ind Key Exists : " + sortedList.ContainsKey("Ind"));
            Console.WriteLine("Is NZ Key Exists : " + sortedList.ContainsKey("NZ"));
            //Checking the value using the ContainsValue method
            Console.WriteLine("Is India value Exists : " + sortedList.ContainsValue("India"));
            Console.WriteLine("Is Bangladesh value Exists : " + sortedList.ContainsValue("Bangladesh"));
           

Console.WriteLine("\nCloned Sorted List Elements:");
            //Creating a clone sortedList using Clone method
            SortedList cloneSortedList = (SortedList)sortedList.Clone();
            foreach (DictionaryEntry item in cloneSortedList)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
            }

        }
    }

-----------------------------------------------------------------------------------------------------------------------------------
List Demo
-------------

  List<int> integerlist = new List<int>() { 10, 20, 30, 40, 250, 160, 70, 80, 90, 100 };
  integerlist.Sort();
 
  foreach (int item in integerlist)
  {
      Console.WriteLine(item);
  }
  integerlist.Reverse();
  Console.WriteLine(  "\n\n After Reverse");
  foreach (int item in integerlist)
  {
      Console.WriteLine(item);
  }
---------------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollectionsDemo
{


    internal class ListDemo1
    {
        static void Main(string[] args)
        {
            // List<Employee> employees = new List<Employee>()
            //{
            //    new Employee(){EmpId = 1,Name="Akash",Gender="Male",Salary=25000},
            //     new Employee(){EmpId = 4,Name="Ravi",Gender="Male",Salary=26000},
            //      new Employee(){EmpId = 2,Name="Srinithi",Gender="Female",Salary=35000},
            //     new Employee(){EmpId = 3,Name="Jitendra",Gender="Male",Salary=50000}
            // };
            // foreach (Employee employee in employees)
            // {
            //     Console.WriteLine($" {employee.EmpId}\t {employee.Name}\t {employee.Gender}\t {employee.Salary}");
            // }

            IList<Employee> EmployeeList = new List<Employee>()
            {
                new Employee() { EmpId = 1, Name = "Akash", Gender = "Male", Salary = 25000 },
                new Employee() { EmpId = 4, Name = "Ravi", Gender = "Male", Salary = 26000 },
                new Employee() { EmpId = 2, Name = "Srinithi", Gender = "Female", Salary = 35000 },
                new Employee() { EmpId = 3, Name = "Jitendra", Gender = "Male", Salary = 50000 }
                 };

            //(or)

            IList<Employee> employees = new List<Employee>();
            Employee emp1 = new Employee { EmpId = 1, Name = "Akash", Gender = "Male", Salary = 25000 };
            Employee emp2 = new Employee() { EmpId = 4, Name = "Ravi", Gender = "Male", Salary = 26000 };
            Employee emp3 = new Employee() { EmpId = 2, Name = "Srinithi", Gender = "Female", Salary = 35000 };
            Employee emp4 = new Employee() { EmpId = 3, Name = "Jitendra", Gender = "Male", Salary = 50000 };
            employees.Add(emp1);
            employees.Add(emp2);
            employees.Add(emp3);
            employees.Add(emp4);

            foreach (Employee employee in employees)
            {
                Console.WriteLine($" {employee.EmpId}\t {employee.Name}\t {employee.Gender}\t {employee.Salary}");
            }
            Console.ReadLine();
        }
    }
    class Employee
    {
        public int EmpId { get; set; }
        public string Name { get; set; }
        public string Gender { get; set; }
        public int Salary { get; set; }
    }
}








==========================================================================================================================================================

